#!/bin/bash

# DebISO - Debian/Ubuntu Remix Creator
# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) 2023-2025 Nakamura Musical Industries Dojin Club

set -e
set -o pipefail
set +u

export LC_ALL=C
DEBISO_VERSION="1.2"

_prepare(){
	if [ ! -d ${WORKDIR} ];then
		mkdir -p ${WORKDIR}/chroot
	else
		mkdir ${WORKDIR}/chroot
	fi

	debootstrap --arch=${ARCH} --variant=minbase ${UPSTREAM_VERSION} ${WORKDIR}/chroot ${MIRROR_URL}

	cp -pr 	${PROFDIR}/dirootfs/* ${WORKDIR}/chroot/
	cp -p ${PROFDIR}/packages.${ARCH} ${WORKDIR}/
	sed "/^\#/d" -i ${WORKDIR}/packages.${ARCH}
	cp -pr ${PROFDIR}/grub ${WORKDIR}/
	cp -pr ${PROFDIR}/sources.list ${WORKDIR}/chroot/etc/apt/
	if [ -d ${PROFDIR}/calamares_config.d ]; then
		cp -pr ${PROFDIR}/calamares_config.d ${WORKDIR}/chroot/etc/calamares
	fi
	if [ -d ${PROFDIR}/sources.list.d ]; then
		cp -pr ${PROFDIR}/sources.list.d/* ${WORKDIR}/chroot/etc/apt/sources.list.d/
	fi
	if [ -d ${PROFDIR}/trusted.gpg.d ]; then
		cp -pr ${PROFDIR}/trusted.gpg.d/* ${WORKDIR}/chroot/etc/apt/trusted.gpg.d/
	fi
	if [ -f ${PROFDIR}/rec_packages.${ARCH} ]; then
		cp -p ${PROFDIR}/rec_packages.${ARCH} ${WORKDIR}/
		sed /^\#/d -i ${WORKDIR}/rec_packages.${ARCH}
	fi
	if [ -f ${PROFDIR}/sug_packages.${ARCH} ]; then
		cp -p ${PROFDIR}/sug_packages.${ARCH} ${WORKDIR}/
		sed /^\#/d -i ${WORKDIR}/sug_packages.${ARCH}
	fi
	if [ -f ${PROFDIR}/exclude_packages.${ARCH} ]; then
		cp -p ${PROFDIR}/exclude_packages.${ARCH} ${WORKDIR}/
		sed /^\#/d -i ${WORKDIR}/exclude_packages.${ARCH}
	fi
	if [ -f ${PROFDIR}/flatpak_packages.${ARCH} ]; then
		cp -p ${PROFDIR}/flatpak_packages.${ARCH} ${WORKDIR}/
	 sed /^\#/d -i ${WORKDIR}/flatpak_packages.${ARCH}
	fi
	if [ -f ${PROFDIR}/ppa.${ARCH} ]; then
		cp -p ${PROFDIR}/ppa.${ARCH} ${WORKDIR}/
		sed "/^\#/d" -i ${WORKDIR}/ppa.${ARCH}
	fi
	if [ -d ${WORKDIR}/chroot/root/customise_dirootfs.d/ ]; then
		chmod 755 ${WORKDIR}/chroot/root/customise_dirootfs.d/*.sh
	fi

	sed "s/%DISTRO_NAME%/${DISTRO_NAME}/g" -i ${WORKDIR}/grub/grub.cfg
	sed "s/%DISTRO_UNAME%/${DISTRO_UNAME}/g" -i ${WORKDIR}/grub/grub.cfg

	# chroot
	cd ${WORKDIR}
	mount --bind /dev chroot/dev
	mount --bind /run chroot/run
	chroot chroot mount none -t proc /proc
	chroot chroot mount none -t sysfs /sys
	chroot chroot mount none -t devpts /dev/pts
}

_setup(){
	chmod 700 chroot/root
	chown root:root chroot/root

	if [ -f ppa.${ARCH} ]; then
		chroot chroot apt-get install -y software-properties-common
		PPALIST=($(cat ppa.${ARCH}))
		for ((i=0; i < ${#PPALIST[*]}; i++)); do
			chroot chroot add-apt-repository -y ppa:${PPALIST[i]}
		done
	fi

	if [ -f chroot/root/customise_dirootfs.d/preinstall.sh ]; then
		chroot chroot /root/customise_dirootfs.d/preinstall.sh
	fi

	chroot chroot apt-get update
	chroot chroot apt-get upgrade -y
	chroot chroot apt-get install -y --no-install-recommends $(cat packages.${ARCH})

	if [ -f rec_packages.${ARCH} ]; then
		chroot chroot apt-get install -y $(cat rec_packages.${ARCH})
	fi

	if [ -f sug_packages.${ARCH} ]; then
		chroot chroot apt-get install -y --install-suggests $(cat sug_packages.${ARCH})
	fi

	if [ -f chroot/root/customise_dirootfs.d/postinstall.sh ]; then
		chroot chroot /root/customise_dirootfs.d/postinstall.sh
		rm -r chroot/root/customise_dirootfs.d
	fi

	if [ -f chroot/root/customise_dirootfs.d/preexclude.sh ]; then
		chroot chroot /root/customise_dirootfs.d/preexclude.sh
		rm -r chroot/root/customise_dirootfs.d
	fi

	if [ -f exclude_packages.${ARCH} ]; then
		chroot chroot apt-get purge -y --autoremove $(cat exclude_packages.${ARCH})
	fi

	if [ -f chroot/root/customise_dirootfs.d/postexclude.sh ]; then
		chroot chroot /root/customise_dirootfs.d/postexclude.sh
		rm -r chroot/root/customise_dirootfs.d
	fi

	# flatpak's pkgs
	if [ -f flatpak_packages.${ARCH} ]; then
		chroot chroot apt-get install -y flatpak
		chroot chroot flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
		chroot chroot flatpak update
		chroot chroot flatpak install -y flathub $(cat flatpak_packages.${ARCH})
	fi

	_PATH="/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/usr/sbin"

	PATH=${_PATH} chroot chroot /usr/sbin/dpkg-reconfigure locales
	PATH=${_PATH} chroot chroot /usr/sbin/dpkg-reconfigure resolvconf

	cat <<EOF > chroot/etc/NetworkManager/NetworkManager.conf
[main]
rc-manager=resolvconf
plugins=ifupdown,keyfile
dns=dnsmasq

[ifupdown]
managed=false
EOF
	PATH=${_PATH} chroot chroot /usr/sbin/dpkg-reconfigure network-manager

	chroot chroot apt-get clean -y
}

_build_iso(){
	umount -l chroot/proc
	umount -l chroot/sys
	umount -l chroot/dev/pts
	umount -l chroot/dev
	umount -l chroot/run

	if [[ ${UPSTREAM} == "debian" ]]; then
		LIVEDIR=live
	elif [[ ${UPSTREAM} == "ubuntu" ]]; then
		LIVEDIR=casper
	fi

	mkdir iso
	mkdir -p iso/{${LIVEDIR},isolinux,install}

	# copy kernel
	if [[ ${UPSTREAM} == "debian" ]]; then
			cp chroot/boot/vmlinuz-**-**-${ARCH} iso/live/vmlinuz
			cp chroot/boot/initrd.img-**-**-${ARCH} iso/live/initrd
	elif [[ ${UPSTREAM} == "ubuntu" ]]; then
			cp chroot/boot/vmlinuz-**-**-generic iso/casper/vmlinuz
			cp chroot/boot/initrd.img-**-**-generic iso/casper/initrd
	fi

	# grub
	touch iso/${DISTRO_UNAME}
	cp grub/grub.cfg iso/isolinux/grub.cfg

	# package list
	chroot chroot dpkg-query -W --showformat='${Package} ${Version}\n' > iso/${LIVEDIR}/filesystem.packages

	# compress rootfs
	mksquashfs chroot iso/${LIVEDIR}/filesystem.squashfs \
	    -noappend -no-duplicates -no-recovery \
	    -wildcards \
	    -e "var/cache/apt/archives/*" \
	    -e "root/*" \
	    -e "root/.*" \
	    -e "tmp/*" \
	    -e "tmp/.*" \
	    -e "swapfile" \
	    -comp xz

	if [[ ${UPSTREAM} == "ubuntu" ]]; then
		# create diskdefines
		cat <<EOF > iso/README.diskdefines
#define DISKNAME  ${DISTRO_UNAME}
#define TYPE  binary
#define TYPEbinary  1
#define ARCH  amd64
#define ARCHamd64  1
#define DISKNUM  1
#define DISKNUM1  1
#define TOTALNUM  0
#define TOTALNUM0  1
EOF

		# create disk info
		mkdir iso/.disk
		touch iso/.disk/base_installable
		cat <<EOF > iso/.disk/cd_type
full_cd/single
${DISTRO_NAME} ${DISTRO_VERSION} - Release amd64 ($(date +%Y%m%d))"
EOF
	fi

	# generate grub image
	pushd iso

	grub-mkstandalone \
	    --format=x86_64-efi \
	    --output=isolinux/bootx64.efi \
	    --locales="" \
	    --fonts="" \
	    "boot/grub/grub.cfg=isolinux/grub.cfg"

	(
        cd isolinux && \
        dd if=/dev/zero of=efiboot.img bs=1M count=20 && \
        mkfs.vfat efiboot.img && \
        LC_CTYPE=C mmd -i efiboot.img efi efi/boot && \
        LC_CTYPE=C mcopy -i efiboot.img ./bootx64.efi ::efi/boot/
	)

	grub-mkstandalone \
        --format=i386-pc \
        --output=isolinux/core.img \
        --install-modules="linux16 linux normal iso9660 biosdisk memdisk search tar ls" \
        --modules="linux16 linux normal iso9660 biosdisk search" \
        --locales="" \
        --fonts="" \
        --themes="" \
        "boot/grub/grub.cfg=isolinux/grub.cfg"

	cat /usr/lib/grub/i386-pc/cdboot.img isolinux/core.img > isolinux/bios.img

	/bin/bash -c "(find . -type f -print0 | xargs -0 md5sum | grep -v -e 'md5sum.txt' -e 'bios.img' -e 'efiboot.img' > md5sum.txt)"

	# build iso
	if [ ! -d ${OUTDIR} ];then
		mkdir ../../${OUTDIR}
	fi

	xorriso \
	    -as mkisofs \
	    -iso-level 3 \
	    -full-iso9660-filenames \
	    -volid "${DISTRO_UNAME}" \
	    -eltorito-boot boot/grub/bios.img \
	    -no-emul-boot \
	    -boot-load-size 4 \
	    -boot-info-table \
	    --eltorito-catalog boot/grub/boot.cat \
	    --grub2-boot-info \
	    --grub2-mbr /usr/lib/grub/i386-pc/boot_hybrid.img \
	    -eltorito-alt-boot \
	    -e EFI/efiboot.img \
	    -no-emul-boot \
	    -append_partition 2 0xef isolinux/efiboot.img \
	    -output "../../${OUTDIR}/${DISTRO_UNAME}-${DISTRO_VERSION}-${ARCH}.iso" \
	    -m "isolinux/efiboot.img" \
	    -m "isolinux/bios.img" \
	    -graft-points \
	       "/EFI/efiboot.img=isolinux/efiboot.img" \
	       "/boot/grub/bios.img=isolinux/bios.img" \
	       "."

	popd
}

_usage(){
	echo "usage: mkdebiso [options] -p <profile directory>"
	echo
	echo "Options:"
	echo "   -w <work_dir> Set the working directory"
	echo "                  default: work"
	echo "   -o <out_dir>  Set the output directory"
	echo "                  default: out"
	echo "   -p <prof_dir> Set the profile directory"
	echo "   -i            Enable 32-bit UEFI support"
	echo
	echo "   -h       Show this help"
	echo "   -v       Show version info"
}

_version(){
	echo "DebISO ${DEBISO_VERSION} - Debian/Ubuntu Remix Creator"
	echo
	echo "Copyright (c) 2023 Radio New Japan All Rights Reserved."
	echo "This software is licensed under 3-clause BSD license."
}

_main(){
	if [ ! -f ${PROFDIR}/profiledef.sh ]; then
		echo "ERROR: No profile specified!"
		_usage
		exit 1
	fi

	if [[ $(whoami) != "root" ]]; then
		echo "ERROR: Need to run as root!"
		exit 1
	fi

	source "${PROFDIR}/profiledef.sh"

	_prepare
	_setup
	_build_iso

	export LC_ALL=$(printenv LANG)
	exit 0
}

DISTRO_NAME=""
DISTRO_UNAME=""
DISTRO_VERSION=""
UPSTREAM=""
UPSTREAM_VERSION=""
MIRROR_URL=""
ARCH=""
WORKDIR="work"
OUTDIR="out"
PROFDIR=""

while getopts 'w:o:p:ihv' arg; do
	case "${arg}" in
		h)
			_usage
			exit 0
			;;
		o)
			OUTDIR="${2}"
			shift 2
			;;
		p)
			PROFDIR="${2}"
			shift 2
			;;
		v)
			_version
			exit 0
			;;
		w)
			WORKDIR="${2}"
			shift 2
			;;
		*)
			echo "ERROR: Invalid argument '${1}'!"
			_usage
			exit 1
			;;
	esac
done

_main
